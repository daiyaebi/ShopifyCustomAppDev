'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var network = require('@shopify/network');
var types = require('./types.js');

exports.DeliveryMethod = void 0;

(function (DeliveryMethod) {
  DeliveryMethod["Http"] = "http";
  DeliveryMethod["EventBridge"] = "eventbridge";
})(exports.DeliveryMethod || (exports.DeliveryMethod = {}));

async function registerWebhook({
  address,
  topic,
  accessToken,
  shop,
  apiVersion,
  includeFields,
  deliveryMethod = exports.DeliveryMethod.Http
}) {
  const response = await fetch(`https://${shop}/admin/api/${apiVersion}/graphql.json`, {
    method: network.Method.Post,
    body: buildQuery(topic, address, deliveryMethod, includeFields),
    headers: {
      [types.WebhookHeader.AccessToken]: accessToken,
      [network.Header.ContentType]: 'application/graphql'
    }
  });
  const result = await response.json();
  return {
    success: isSuccess(result, deliveryMethod),
    result
  };
}

function isSuccess(result, deliveryMethod) {
  switch (deliveryMethod) {
    case exports.DeliveryMethod.Http:
      return Boolean(result.data && result.data.webhookSubscriptionCreate && result.data.webhookSubscriptionCreate.webhookSubscription);

    case exports.DeliveryMethod.EventBridge:
      return Boolean(result.data && result.data.eventBridgeWebhookSubscriptionCreate && result.data.eventBridgeWebhookSubscriptionCreate.webhookSubscription);
  }
}

function buildArgs(args) {
  const formattedArgs = Object.entries(args).filter(([_key, value]) => typeof value !== 'undefined').map(([key, value]) => {
    return `${key}: ${JSON.stringify(value)}`;
  });
  return `{${formattedArgs.join(', ')}}`;
}

function buildQuery(topic, address, deliveryMethod, includeFields) {
  let mutationName;
  let webhookSubscriptionArgs;

  switch (deliveryMethod) {
    case exports.DeliveryMethod.Http:
      mutationName = 'webhookSubscriptionCreate';
      webhookSubscriptionArgs = buildArgs({
        callbackUrl: address,
        includeFields
      });
      break;

    case exports.DeliveryMethod.EventBridge:
      mutationName = 'eventBridgeWebhookSubscriptionCreate';
      webhookSubscriptionArgs = buildArgs({
        arn: address,
        includeFields
      });
      break;
  }

  return `
    mutation webhookSubscriptionCreate {
      ${mutationName}(topic: ${topic}, webhookSubscription: ${webhookSubscriptionArgs}) {
        userErrors {
          field
          message
        }
        webhookSubscription {
          id
        }
      }
    }
  `;
}

exports.registerWebhook = registerWebhook;
