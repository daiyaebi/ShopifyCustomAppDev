"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
/**
 * This function will return true on a valid shopify application proxy request.
 * @param parsedQueryString An object containing the complete query string.
 * @param shopifySecret The shopify secret for your app.
 * @param nonShopifyQueryParamKeys An array of keys to not use to create the signature. This is helpful if you have additional params added after shopify creates them.
 * @returns boolean
 */
const verifyAppProxyHmac = (parsedQueryString, shopifySecret, nonShopifyQueryParamKeys) => {
    if (!parsedQueryString ||
        typeof parsedQueryString !== 'object' ||
        !shopifySecret) {
        return false;
    }
    const { signature } = parsedQueryString, otherQueryParams = __rest(parsedQueryString, ["signature"]);
    const input = Object.keys(otherQueryParams)
        .filter((key) => !nonShopifyQueryParamKeys ||
        !nonShopifyQueryParamKeys.includes(key))
        .sort()
        .map((key) => {
        const value = otherQueryParams[key];
        return `${key}=${value}`;
    })
        .join('');
    const hash = crypto_1.default
        .createHmac('sha256', shopifySecret)
        .update(input)
        .digest('hex');
    return signature === hash;
};
exports.default = verifyAppProxyHmac;
