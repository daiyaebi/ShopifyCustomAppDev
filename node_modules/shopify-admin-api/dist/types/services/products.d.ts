import * as Options from '../options';
import { BaseService } from '../infrastructure';
import { Product, ProductUpdateCreate, MetaField, MetaFieldUpdateCreate } from '../interfaces';
export declare class Products extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Gets a count of all of the shop's Products.
     * @param options Options for filtering the results.
     * @see https://help.shopify.com/api/reference/product#count
     */
    count(options?: Options.ProductCountOptions): Promise<number>;
    /**
     * Gets a list of up to 250 of the shop's Products.
     * @param options Options for filtering the results.
     */
    list(options?: Options.ProductListOptions): Promise<Product[]>;
    /**
     * Gets the Product with the given id.
     * @param id The Product's id.
     * @param options Options for filtering the results.
     */
    get(id: number, options?: Options.ProductGetOptions): Promise<Product>;
    /**
     * Creates an Product.
     * @param product The Product being created.
     * @param options Options for creating the Product.
     */
    create(product: ProductUpdateCreate): Promise<Product>;
    /**
     * Updates an Product with the given id.
     * @param id The Product's id.
     * @param product The updated Product.
     */
    update(id: number, product: ProductUpdateCreate): Promise<Product>;
    /**
     * Deletes an Product with the given id.
     * @param id The Product's id.
     */
    delete(id: number): Promise<undefined>;
    /**
     * Gets a list of up to 250 metafields from the given product.
     * @param id The product's id.
     * @param options Options for filtering the results.
     */
    listMetafields(productId: number, options?: Options.MetafieldListOptions): Promise<Partial<MetaField>[]>;
    /**
     * Returns the number of metafields belonging to the given product.
     * @param id The product's id.
     */
    countMetafields(productId: number): Promise<number>;
    /**
     * Gets the metafield with the given id from an product.
     * @param productId The product's id.
     * @param id The metafield's id.
     */
    getMetafield(productId: number, id: number): Promise<Partial<MetaField>>;
    /**
     * Creates a metafield for the given product.
     * @param productId The product's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    createMetafield(productId: number, metafield: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Updates a metafield for the given product
     * @param productId The product's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    updateMetafield(productId: number, id: number, metafield?: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Deletes the metafield with the given id from an product.
     * @param productId The product's id.
     * @param id The metafield's id.
     */
    deleteMetafield(productId: number, id: number): Promise<undefined>;
}
export default Products;
