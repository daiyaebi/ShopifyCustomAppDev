import * as Options from '../options';
import { BaseService } from '../infrastructure';
import { MetaField, MetaFieldUpdateCreate, Order, OrderCreate, Transaction } from '../interfaces';
export declare class Orders extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Gets a count of all of the shop's orders.
     * @param options Options for filtering the results.
     */
    count(options?: Options.OrderCountOptions): Promise<number>;
    /**
     * Gets a list of up to 250 of the shop's orders.
     * @param options Options for filtering the results.
     */
    list(options?: Options.OrderListOptions): Promise<Partial<Order>[]>;
    /**
     * Gets a list of up to 250 orders from the given customer.
     * @param customerId The customer's id.
     * @param options Options for filtering the results.
     */
    listForCustomer(customerId: number, options?: Options.OrderListOptions): Promise<Partial<Order>[]>;
    /**
     * Gets the order with the given id.
     * @param orderId The order's id.
     * @param options Options for filtering the results.
     */
    get(orderId: number, options?: Options.OrderGetOptions): Promise<Partial<Order>>;
    /**
     * Creates an order.
     * @param order The order being created.
     * @param options Options for creating the order.
     */
    create(order: OrderCreate, transactions?: Transaction[], options?: Options.OrderCreateOptions): Promise<Order>;
    /**
     * Updates an order with the given id.
     * @param id The order's id.
     * @param order The updated order.
     */
    update(id: number, order: Partial<OrderCreate>): Promise<Order>;
    /**
     * Deletes an order with the given id.
     * @param id The order's id.
     */
    delete(id: number): Promise<undefined>;
    /**
     * Closes an order with the given id.
     * @param id The order's id.
     */
    close(id: number): Promise<Order>;
    /**
     * Opens an order with the given id.
     * @param id The order's id.
     */
    open(id: number): Promise<Order>;
    /**
     * Cancels an order with the given id.
     * @param id The order's id.
     * @param options Options for canceling the order.
     */
    cancel(id: number, options?: Options.OrderCancelOptions): Promise<Order>;
    /**
     * Gets a list of up to 250 metafields from the given order.
     * @param id The order's id.
     * @param options Options for filtering the results.
     */
    listMetafields(orderId: number, options?: Options.MetafieldListOptions): Promise<Partial<MetaField>[]>;
    /**
     * Returns the number of metafields belonging to the given order.
     * @param id The order's id.
     */
    countMetafields(orderId: number): Promise<number>;
    /**
     * Gets the metafield with the given id from an order.
     * @param orderId The order's id.
     * @param id The metafield's id.
     */
    getMetafield(orderId: number, id: number): Promise<Partial<MetaField>>;
    /**
     * Creates a metafield for the given order.
     * @param orderId The order's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    createMetafield(orderId: number, metafield: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Updates a metafield for the given order
     * @param orderId The order's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    updateMetafield(orderId: number, id: number, metafield?: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Deletes the metafield with the given id from an order.
     * @param orderId The order's id.
     * @param id The metafield's id.
     */
    deleteMetafield(orderId: number, id: number): Promise<undefined>;
}
export default Orders;
