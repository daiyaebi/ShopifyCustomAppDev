import * as Options from '../options';
import { BaseService } from '../infrastructure';
import { Redirect } from '../interfaces';
/**
 * A service for manipulating Shopify redirects.
 */
export declare class Redirects extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Gets a count of all of the shop's redirects.
     * @param options Options for filtering the results.
     */
    count(options?: Options.RedirectOptions): Promise<number>;
    /**
     * Gets a list of up to 250 of the shop's redirects.
     * @param options Options for filtering the results.
     */
    list(options?: Options.RedirectOptions & Options.ListOptions & Options.FieldOptions): Promise<Redirect[]>;
    /**
     * Retrieves the redirect with the given id.
     * @param options Options for filtering the results.
     */
    get(id: number, options?: Options.FieldOptions): Promise<Redirect>;
    /**
     * Creates a new redirect.
     */
    create(redirect: Partial<Redirect>): Promise<Redirect>;
    /**
     * Updates the redirect with the given id.
     * @param tag The updated redirect.
     */
    update(id: number, redirect: Partial<Redirect>): Promise<Redirect>;
    /**
     * Deletes the redirect with the given id.
     */
    delete(id: number): Promise<undefined>;
}
export default Redirects;
