import * as Options from '../options';
import { BaseService } from '../infrastructure';
import { SmartCollection, MetaField, MetaFieldUpdateCreate } from '../interfaces';
export declare class SmartCollections extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Get a count of all smart collections that contain a given product
     * @param options Options for filtering the results.
     * @see https://help.shopify.com/api/reference/smartcollection#count
     */
    count(options?: Options.CollectionCountOptions): Promise<number>;
    /**
     * Get a list of all smart collections that contain a given product
     * @param options Options for filtering the results.
     */
    list(options?: Options.CollectionListOptions): Promise<SmartCollection[]>;
    /**
     * Get a single collection
     * @param id The collection's id.
     * @param options Options for filtering the results.
     */
    get(id: number, options?: Options.CollectionGetOptions): Promise<SmartCollection>;
    /**
     * Create a new smart collection.
     * @param collection The collection being created.
     * @param options Options for creating the collection.
     */
    create(collection: Partial<SmartCollection>): Promise<SmartCollection>;
    /**
     * Updates an collection with the given id.
     * @param id The collection's id.
     * @param collection The updated collection.
     */
    update(id: number, collection: Partial<SmartCollection>): Promise<SmartCollection>;
    /**
     * Deletes an collection with the given id.
     * @param id The collection's id.
     */
    delete(id: number): Promise<undefined>;
    /**
     * Gets a list of up to 250 metafields from the given smartCollection.
     * @param id The smartCollection's id.
     * @param options Options for filtering the results.
     */
    listMetafields(smartCollectionId: number, options?: Options.MetafieldListOptions): Promise<Partial<MetaField>[]>;
    /**
     * Returns the number of metafields belonging to the given smartCollection.
     * @param id The smartCollection's id.
     */
    countMetafields(smartCollectionId: number): Promise<number>;
    /**
     * Gets the metafield with the given id from an smartCollection.
     * @param smartCollectionId The smartCollection's id.
     * @param id The metafield's id.
     */
    getMetafield(smartCollectionId: number, id: number): Promise<Partial<MetaField>>;
    /**
     * Creates a metafield for the given smartCollection.
     * @param smartCollectionId The smartCollection's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    createMetafield(smartCollectionId: number, metafield: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Updates a metafield for the given smartCollection
     * @param smartCollectionId The smartCollection's id.
     * @param id The metafield's id.
     * @param metafield Options for the metafield
     */
    updateMetafield(smartCollectionId: number, id: number, metafield?: Partial<MetaFieldUpdateCreate>): Promise<Partial<MetaField>>;
    /**
     * Deletes the metafield with the given id from an smartCollection.
     * @param smartCollectionId The smartCollection's id.
     * @param id The metafield's id.
     */
    deleteMetafield(smartCollectionId: number, id: number): Promise<undefined>;
}
export default SmartCollections;
